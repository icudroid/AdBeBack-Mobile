package fr.k2i.adbeback.connexion;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.json.JSONException;
import org.json.JSONObject;

import fr.k2i.adbeback.LoginException;
import fr.k2i.adbeback.business.UserBean;
import fr.k2i.adbeback.dao.UserDao;

public class ServerConnexion {

	public static String pseudo = null;
	private static String sessionId = null;
//	public static String baseUrl = "http://163.104.30.71:8080/AdnJoy/";
	 public static String baseUrl = "http://192.168.0.10:8080/AdnJoy/";
//	public static String baseUrl = "http://www.d-kahn.net/AdnJoy/";

	/*
	 * Date Thu, 13 May 2010 15:06:17 GMT Server Apache/1.3.34 (Debian)
	 * PHP/5.2.0-8+etch13 mod_jk/1.2.18 mod_ssl/2.8.25 OpenSSL/0.9.8c Set-Cookie
	 * JSESSIONID=97B66557955E2ADE064B709FB1EFDF91; Path=/AdnJoy
	 * Content-Language en-US Keep-Alive timeout=15, max=100 Connection
	 * Keep-Alive Transfer-Encoding chunked Content-Type text/html;charset=UTF-8
	 */

	public static UserDao userDao;
	
	public static JSONObject sendRequest(String req,
			Map<String, String> params) throws URISyntaxException,
			ClientProtocolException, IOException, JSONException, LoginException {
		Reader reader = new InputStreamReader(getinputStream(req, params),"UTF-8");

		StringBuilder sb = new StringBuilder();
		char[] bts = new char[1024*8];

		int numChars;
		while ((numChars = reader.read(bts, 0, bts.length)) > 0) {
			sb.append(bts, 0, numChars);
		}
		reader.close();
		if (sb.length() == 0)
			return null;
		JSONObject o = new JSONObject(sb.toString());
		try{
			if(o.getInt("failed")==0){
				throw new LoginException();
			}
		}catch (Exception e) {
			// TODO: handle exception
		}
		return o;

	}

	public static InputStream getinputStream(String req,
			Map<String, String> params) throws URISyntaxException,
			ClientProtocolException, IOException, JSONException, LoginException {
		
//        // Create and initialize HTTP parameters
//        HttpParams httpParams = new BasicHttpParams();
//        ConnManagerParams.setMaxTotalConnections(httpParams, 100);
//        HttpProtocolParams.setVersion(httpParams, HttpVersion.HTTP_1_1);
//        
//        // Create and initialize scheme registry 
//        SchemeRegistry schemeRegistry = new SchemeRegistry();
//        schemeRegistry.register(
//                new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
//        
//        // Create an HttpClient with the ThreadSafeClientConnManager.
//        // This connection manager must be used if more than one thread will
//        // be using the HttpClient.
//        ClientConnectionManager cm = new ThreadSafeClientConnManager(httpParams, schemeRegistry);
//        HttpClient client = new DefaultHttpClient(cm, httpParams);
		
		HttpClient client = new DefaultHttpClient();
		HttpPost request = new HttpPost(baseUrl + req);
		
		List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();  
		  
		if (sessionId != null) {
			request.addHeader("Cookie", "JSESSIONID=" + sessionId);
		}
		
//		request.addHeader("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
//		request.addHeader("Accept-Language","fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3");
//		request.addHeader("Accept-Encoding","gzip,deflate");
//		request.addHeader("Accept-Charset","ISO-8859-1,utf-8;q=0.7,*;q=0.7");
//		request.addHeader("Keep-Alive","115");
//		request.addHeader("Connection","keep-alive");
		request.addHeader("Content-Type","application/x-www-form-urlencoded; charset=UTF-8");
			
		for (java.util.Map.Entry<String, String> param : params.entrySet()) {
			nameValuePairs.add(new BasicNameValuePair(param.getKey(), param.getValue()));	
		}
		
		
		request.setEntity(new UrlEncodedFormEntity(nameValuePairs,"UTF-8"));
//		StringBuilder uriBuilder = new StringBuilder(baseUrl + req);
//		boolean firstParam = true;
//		for (java.util.Map.Entry<String, String> param : params.entrySet()) {
//			if (firstParam == true) {
//				uriBuilder.append("?");
//				firstParam = false;
//			} else {
//				uriBuilder.append("&");
//			}
//			uriBuilder.append(param.getKey() + "="
//					+ URLEncoder.encode(param.getValue(),"UTF-8"));
//
//		}
//		request.setURI(new URI(uriBuilder.toString()));
 
		HttpResponse execute = client.execute(request);

		
		
		Header[] headers = execute.getHeaders("Set-Cookie");

		for (Header header : headers) {
			StringTokenizer st = new StringTokenizer(header.getValue(), ";");
			while (st.hasMoreTokens()) {
				String nextToken = st.nextToken();
				if (nextToken.startsWith("JSESSIONID=")) {
					String old = nextToken.substring("JSESSIONID=".length());
					if(!old.equals(sessionId)){
						sessionId = nextToken.substring("JSESSIONID=".length());
						//d√©connecter
						UserBean defaultUser = userDao.getDefaultUser();
						//Connexion automatique de l'utiliseur
						if(defaultUser!=null){
							onConnexion(defaultUser.getPseudo(), defaultUser.getPwd(), defaultUser.getDefaultProfile());
						}
					}
				}
			}
		}

		InputStream content = execute.getEntity().getContent();
//		client.getConnectionManager().shutdown(); 
		return content;
	}
	
	
	protected static void onConnexion(String pseudo, String pwd, boolean autoConnect) throws LoginException {
		Map<String, String> params = new HashMap<String, String>();
		params.put("pseudo", pseudo);
		params.put("pwd", pwd);
		try {
			ServerConnexion.sendRequest("Android/Connexion.htm",params);
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
	}
	
}
